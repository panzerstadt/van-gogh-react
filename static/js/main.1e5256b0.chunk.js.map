{"version":3,"sources":["imgs sync /.*/.jpg$","imgs/vg_1.jpg","imgs/vg_10.jpg","imgs/vg_2.jpg","imgs/vg_3.jpg","imgs/vg_4.jpg","imgs/vg_5.jpg","imgs/vg_6.jpg","imgs/vg_7.jpg","imgs/vg_8.jpg","imgs/vg_9.jpg","App.js","serviceWorker.js","index.js"],"names":["map","./vg_1.jpg","./vg_10.jpg","./vg_2.jpg","./vg_3.jpg","./vg_4.jpg","./vg_5.jpg","./vg_6.jpg","./vg_7.jpg","./vg_8.jpg","./vg_9.jpg","webpackContext","req","id","webpackContextResolve","__webpack_require__","e","Error","code","keys","Object","resolve","module","exports","p","r","cards","require","v","to","i","x","y","scale","rot","Math","random","delay","from","defineProperty","trans","s","concat","Deck","_useState","useState","Set","gone","slicedToArray","_useSprings","useSprings","length","objectSpread","_useSprings2","props","set","_useState3","_useState4","domClr","setDomClr","useEffect","_ref2","asyncToGenerator","regenerator_default","a","mark","_callee2","promises","colors","wrap","_context2","prev","next","_ref3","_callee","c","_context","splashy","then","abrupt","sent","stop","_x","apply","this","arguments","Promise","all","console","log","getColors","_useState5","_useState6","currentIndex","setCurrentIndex","document","getElementById","style","backgroundColor","bind","useGesture","_ref4","index","args","down","xDelta","delta","xDir","distance","direction","velocity","trigger","dir","add","isGone","has","window","innerWidth","undefined","config","friction","tension","size","setTimeout","clear","_ref5","react_default","createElement","web","div","key","transform","interpolate","assign","backgroundImage","Boolean","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1e5256b0.chunk.js","sourcesContent":["var map = {\n\t\"./vg_1.jpg\": 211,\n\t\"./vg_10.jpg\": 212,\n\t\"./vg_2.jpg\": 213,\n\t\"./vg_3.jpg\": 214,\n\t\"./vg_4.jpg\": 215,\n\t\"./vg_5.jpg\": 216,\n\t\"./vg_6.jpg\": 217,\n\t\"./vg_7.jpg\": 218,\n\t\"./vg_8.jpg\": 219,\n\t\"./vg_9.jpg\": 220\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 210;","module.exports = __webpack_public_path__ + \"static/media/vg_1.ce200e46.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vg_10.845494ce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vg_2.73c0a678.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vg_3.1311d7c7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vg_4.e65e888b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vg_5.70e1d38a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vg_6.a43cc8f9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vg_7.e1ff9886.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vg_8.8c98fe1f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vg_9.21e67d68.jpg\";","import React, { useState, useEffect, useRef } from \"react\";\nimport { useSprings, animated, interpolate } from \"react-spring\";\nimport { useGesture } from \"react-with-gesture\";\nimport splashy from \"splashy\";\n\nimport \"./App.css\";\n\nfunction importFolder(r) {\n  return r.keys().map(v => r(v));\n}\n// prepare bg images\n\nlet images = importFolder(require.context(\"./imgs\", true, /.*\\.jpg$/));\nconst cards = images;\n\n// These two are just helpers, they curate spring data, values that are later being interpolated into css\nconst to = i => ({\n  x: 0,\n  y: i * -4,\n  scale: 1,\n  rot: -10 + Math.random() * 20,\n  delay: i * 100\n});\nconst from = i => ({ x: 0, y: i * -4, rot: 0, scale: 1.5, y: -1000 });\n// This is being used down there in the view, it interpolates rotation and scale into a css transform\nconst trans = (r, s) =>\n  `perspective(1500px) rotateX(30deg) rotateY(${r /\n    10}deg) rotateZ(${r}deg) scale(${s})`;\n\nfunction Deck() {\n  const [gone] = useState(() => new Set()); // The set flags all the cards that are flicked out\n  const [props, set] = useSprings(cards.length, i => ({\n    ...to(i),\n    from: from(i)\n  })); // Create a bunch of springs using the helpers above\n\n  // calculate dominant colors for each image\n  const [domClr, setDomClr] = useState([]);\n  useEffect(() => {\n    const getColors = async () => {\n      const promises = cards.map(async c => {\n        return await splashy(c).then(c => c[0]); // gets the most dominant color\n      });\n\n      const colors = await Promise.all(promises);\n      console.log(colors);\n      setDomClr(colors);\n    };\n\n    getColors();\n  }, [cards]);\n\n  const [currentIndex, setCurrentIndex] = useState(0);\n  useEffect(() => {\n    // change bg color (affects the outside)\n    const r = document.getElementById(\"root\");\n    r.style.backgroundColor = domClr[currentIndex];\n  }, [currentIndex]);\n\n  // Create a gesture, we're interested in down-state, delta (current-pos - click-pos), direction and velocity\n  const bind = useGesture(\n    ({\n      args: [index],\n      down,\n      delta: [xDelta],\n      distance,\n      direction: [xDir],\n      velocity\n    }) => {\n      // trigger defines when the card is changes\n      const trigger = velocity > 0.2; // If you flick hard enough it should trigger the card to fly out\n\n      if (!down && trigger) {\n        setCurrentIndex(index - 1);\n        // because this bind action is done during first render (and it's only rendered once)\n        // it will not know the state of the updated domClr\n        // therefore we have to bind it outside\n      }\n\n      const dir = xDir < 0 ? -1 : 1; // Direction should either point left or right\n      if (!down && trigger) gone.add(index); // If button/finger's up and trigger velocity is reached, we flag the card ready to fly out\n      set(i => {\n        if (index !== i) return; // We're only interested in changing spring-data for the current spring\n        const isGone = gone.has(index);\n        const x = isGone ? (200 + window.innerWidth) * dir : down ? xDelta : 0; // When a card is gone it flys out left or right, otherwise goes back to zero\n        const rot = xDelta / 100 + (isGone ? dir * 10 * velocity : 0); // How much the card tilts, flicking it harder makes it rotate faster\n        const scale = down ? 1.1 : 1; // Active cards lift up a bit\n        return {\n          x,\n          rot,\n          scale,\n          delay: undefined,\n          config: { friction: 50, tension: down ? 800 : isGone ? 200 : 500 }\n        };\n      });\n      if (!down && gone.size === cards.length)\n        setTimeout(() => gone.clear() || set(i => to(i)), 600);\n    }\n  );\n  // Now we're just mapping the animated values to our view, that's it. Btw, this component only renders once. :-)\n\n  return props.map(({ x, y, rot, scale }, i) => (\n    <animated.div\n      key={i}\n      style={{\n        transform: interpolate([x, y], (x, y) => `translate3d(${x}px,${y}px,0)`)\n      }}\n    >\n      {/* This is the card itself, we're binding our gesture to it (and inject its index so we know which is which) */}\n      <animated.div\n        {...bind(i)}\n        style={{\n          transform: interpolate([rot, scale], trans),\n          backgroundImage: `url(${cards[i]})`\n        }}\n      />\n    </animated.div>\n  ));\n}\n\nexport default Deck;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}